
Memory Configuration

Name             Origin             Length             Attributes
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

                0x00000000001000bc                . = ((0x100000 + SIZEOF_HEADERS) + 0xc)

.text           0x00000000001000bc      0xb38
 *(.text)
 .text          0x00000000001000bc      0x2f4 tmp/arm64-linux.elf-fold.o
                0x0000000000100284                my_bkpt
                0x000000000010028c                exit
                0x0000000000100294                ftruncate
                0x00000000001002a0                memfd_create
                0x00000000001002ac                read
                0x00000000001002b8                write
                0x00000000001002b8                Pwrite
                0x00000000001002c4                close
                0x00000000001002d0                getpid
                0x00000000001002dc                brk
                0x00000000001002e8                munmap
                0x00000000001002e8                Punmap
                0x0000000000100300                Pprotect
                0x0000000000100300                mprotect
                0x0000000000100318                mmap_privanon
                0x0000000000100328                Pmap
                0x0000000000100328                mmap
                0x0000000000100340                unlink
                0x0000000000100354                readlink
                0x000000000010035c                open
                0x0000000000100378                memcpy
                0x000000000010038c                memset
                0x000000000010039c                __clear_cache
 .text          0x00000000001003b0      0x844 tmp/arm64-linux.elf-main.o
                0x00000000001005d0                PF_TO_PROT
                0x0000000000100ab8                upx_main
 .text          0x0000000000100bf4        0x0 tmp/arm64-expand.o
 *(.data)
 .data          0x0000000000100bf4        0x0 tmp/arm64-linux.elf-fold.o
 .data          0x0000000000100bf4        0x0 tmp/arm64-linux.elf-main.o
 .data          0x0000000000100bf4        0x0 tmp/arm64-expand.o

.iplt           0x0000000000100bf4        0x0
 .iplt          0x0000000000100bf4        0x0 tmp/arm64-linux.elf-fold.o

.rela.dyn       0x0000000000100bf8        0x0
 .rela.iplt     0x0000000000100bf8        0x0 tmp/arm64-linux.elf-fold.o

.data
LOAD tmp/arm64-linux.elf-fold.o
LOAD tmp/arm64-linux.elf-main.o
LOAD tmp/arm64-expand.o
OUTPUT(tmp/arm64-linux.elf-fold.bin elf64-littleaarch64)

.igot.plt       0x0000000000100bf8        0x0
 .igot.plt      0x0000000000100bf8        0x0 tmp/arm64-linux.elf-fold.o

.bss            0x0000000000100bf4        0x0
 .bss           0x0000000000100bf4        0x0 tmp/arm64-linux.elf-fold.o
 .bss           0x0000000000100bf4        0x0 tmp/arm64-linux.elf-main.o
 .bss           0x0000000000100bf4        0x0 tmp/arm64-expand.o

EXP_HEAD        0x0000000000000000      0x104
                0x0000000000000000                PROVIDE (__start_EXP_HEAD, .)
 EXP_HEAD       0x0000000000000000      0x104 tmp/arm64-expand.o
                0x0000000000000000                f_expand
                0x0000000000000104                PROVIDE (__stop_EXP_HEAD, .)

EXP_TAIL        0x0000000000000000       0x20
                0x0000000000000000                PROVIDE (__start_EXP_TAIL, .)
 EXP_TAIL       0x0000000000000000       0x20 tmp/arm64-expand.o
                0x0000000000000000                eof
                0x0000000000000020                PROVIDE (__stop_EXP_TAIL, .)

NRV2E           0x0000000000000000      0x17c
                0x0000000000000000                PROVIDE (__start_NRV2E, .)
 NRV2E          0x0000000000000000      0x17c tmp/arm64-expand.o
                0x0000000000000000                ucl_nrv2e_decompress_32
                0x000000000000017c                PROVIDE (__stop_NRV2E, .)

NRV2D           0x0000000000000000      0x170
                0x0000000000000000                PROVIDE (__start_NRV2D, .)
 NRV2D          0x0000000000000000      0x170 tmp/arm64-expand.o
                0x0000000000000000                ucl_nrv2d_decompress_32
                0x0000000000000170                PROVIDE (__stop_NRV2D, .)

NRV2B           0x0000000000000000      0x144
                0x0000000000000000                PROVIDE (__start_NRV2B, .)
 NRV2B          0x0000000000000000      0x144 tmp/arm64-expand.o
                0x0000000000000000                ucl_nrv2b_decompress_32
                0x0000000000000144                PROVIDE (__stop_NRV2B, .)

LZMA_ELF00      0x0000000000000000      0x10c
                0x0000000000000000                PROVIDE (__start_LZMA_ELF00, .)
 LZMA_ELF00     0x0000000000000000      0x10c tmp/arm64-expand.o
                0x000000000000010c                PROVIDE (__stop_LZMA_ELF00, .)

LZMA_DEC20      0x0000000000000000      0x968
                0x0000000000000000                PROVIDE (__start_LZMA_DEC20, .)
 LZMA_DEC20     0x0000000000000000      0x968 tmp/arm64-expand.o
                0x0000000000000968                PROVIDE (__stop_LZMA_DEC20, .)

LZMA_DEC10      0x0000000000000000      0x4a0
                0x0000000000000000                PROVIDE (__start_LZMA_DEC10, .)
 LZMA_DEC10     0x0000000000000000      0x4a0 tmp/arm64-expand.o
                0x0000000000000000                LzmaDecode
                0x00000000000004a0                PROVIDE (__stop_LZMA_DEC10, .)

LZMA_DEC30      0x0000000000000000        0x0
                0x0000000000000000                PROVIDE (__start_LZMA_DEC30, .)
 LZMA_DEC30     0x0000000000000000        0x0 tmp/arm64-expand.o
                0x0000000000000000                PROVIDE (__stop_LZMA_DEC30, .)
